def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    slaveConnectTimeout: 300,
    idleMinutes: 1,
    activeDeadlineSeconds: 3600,
    podRetention: never(),  // ÌååÎìú ÏûêÎèô Ï†ïÎ¶¨ ÏòµÏÖò: never(), onFailure(), always(), default()
    yaml: '''
        spec:
          terminationGracePeriodSeconds: 3
          restartPolicy: Never
          tolerations:
          - effect: NoSchedule
            key: dedicated
            operator: Equal
            value: cicd
    ''',
    containers: [
        containerTemplate(
            name: 'node', 
            image: 'node:slim', 
            ttyEnabled: true, 
            command: 'cat',
            resourceRequestCpu: '500m',
            resourceRequestMemory: '1Gi',
            resourceLimitCpu: '2000m',
            resourceLimitMemory: '4Gi'
        ),
        containerTemplate(
            name: 'podman', 
            image: "mgoltzsche/podman", 
            ttyEnabled: true, 
            command: 'cat', 
            privileged: true,
            resourceRequestCpu: '500m',
            resourceRequestMemory: '1Gi',
            resourceLimitCpu: '2000m',
            resourceLimitMemory: '2Gi'
        ),
        containerTemplate(
            name: 'azure-cli', 
            image: 'hiondal/azure-kubectl:latest', 
            command: 'cat', 
            ttyEnabled: true,
            resourceRequestCpu: '200m',
            resourceRequestMemory: '512Mi',
            resourceLimitCpu: '500m',
            resourceLimitMemory: '1Gi'
        ),
        containerTemplate(
            name: 'sonar-scanner',
            image: 'sonarsource/sonar-scanner-cli:latest',
            command: 'cat',
            ttyEnabled: true,
            resourceRequestCpu: '500m',
            resourceRequestMemory: '1Gi',
            resourceLimitCpu: '1500m',
            resourceLimitMemory: '2Gi'
        )
    ],
    volumes: [
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/opt/sonar-scanner/.sonar/cache', memory: false),
        emptyDirVolume(mountPath: '/root/.npm', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def environment = params.ENVIRONMENT ?: 'dev'
        def skipSonarQube = (params.SKIP_SONARQUBE?.toLowerCase() == 'true')
        def sonarScannerHome = '/opt/sonar-scanner'
        
        try {
            stage("Get Source") {
                checkout scm
                props = readProperties file: "deployment/cicd/config/deploy_env_vars_${environment}"
            }

            stage("Setup AKS") {
                container('azure-cli') {
                    withCredentials([azureServicePrincipal('azure-credentials')]) {
                        sh """
                            az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                            az aks get-credentials --resource-group ${props.resource_group} --name ${props.cluster_name} --overwrite-existing
                            kubectl create namespace phonebill-${environment} --dry-run=client -o yaml | kubectl apply -f -
                        """
                    }
                }
            }

            stage('Build & Test') {
                container('node') {
                    sh """
                        npm ci
                        npm run build
                        npm run lint
                    """
                }
            }

            stage('SonarQube Analysis & Quality Gate') {
                if (skipSonarQube) {
                    echo "‚è≠Ô∏è Skipping SonarQube Analysis (SKIP_SONARQUBE=${params.SKIP_SONARQUBE})"
                } else {
                    container('sonar-scanner') {
                        script {
                            try {
                                withSonarQubeEnv('SonarQube') {
                                    sh """
                                      timeout 600 ${sonarScannerHome}/bin/sonar-scanner \\
                                      -Dsonar.projectKey=phonebill-front-${environment} \\
                                      -Dsonar.projectName=phonebill-front-${environment} \\
                                      -Dsonar.sources=src \\
                                      -Dsonar.tests=src \\
                                      -Dsonar.test.inclusions=**/*.test.ts,**/*.test.tsx,**/*.spec.ts,**/*.spec.tsx \\
                                      -Dsonar.exclusions=node_modules/**,dist/**,build/**,coverage/**,**/*.config.js,**/*.config.ts,scripts/** \\
                                      -Dsonar.scm.disabled=true \\
                                      -Dsonar.sourceEncoding=UTF-8 \\
                                      -Dsonar.typescript.tsconfigPaths=tsconfig.json \\
                                      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \\
                                      -Dsonar.javascript.node.maxspace=4096
                                    """
                                }
                                
                                timeout(time: 5, unit: 'MINUTES') {
                                    def qg = waitForQualityGate()
                                    if (qg.status != 'OK') {
                                        echo "‚ö†Ô∏è Quality Gate failed: ${qg.status}, but continuing pipeline..."
                                    }
                                }
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è SonarQube analysis failed: ${e.getMessage()}, but continuing pipeline..."
                            }
                        }
                    }
                }
            }

            stage('Build & Push Images') {
                timeout(time: 30, unit: 'MINUTES') {
                    container('podman') {
                        withCredentials([
                            usernamePassword(
                                credentialsId: 'acr-credentials',
                                usernameVariable: 'ACR_USERNAME',
                                passwordVariable: 'ACR_PASSWORD'
                            ),
                            usernamePassword(
                                credentialsId: 'dockerhub-credentials',
                                usernameVariable: 'DOCKERHUB_USERNAME', 
                                passwordVariable: 'DOCKERHUB_PASSWORD'
                            )
                        ]) {
                            // Docker Hub Î°úÍ∑∏Ïù∏ (rate limit Ìï¥Í≤∞)
                            sh "podman login docker.io --username \$DOCKERHUB_USERNAME --password \$DOCKERHUB_PASSWORD"
                            
                            // ACR Î°úÍ∑∏Ïù∏
                            sh "podman login acrdigitalgarage01.azurecr.io --username \$ACR_USERNAME --password \$ACR_PASSWORD"

                            sh """
                                podman build \\
                                    -f deployment/container/Dockerfile-frontend \\
                                    --build-arg PROJECT_FOLDER="." \\
                                    --build-arg BUILD_FOLDER="deployment/container" \\
                                    --build-arg EXPORT_PORT="8080" \\
                                    -t acrdigitalgarage01.azurecr.io/phonebill/phonebill-front:${environment}-${imageTag} .

                                podman push acrdigitalgarage01.azurecr.io/phonebill/phonebill-front:${environment}-${imageTag}
                            """
                        }
                    }
                }
            }

            stage('Update Kustomize & Deploy') {
                container('azure-cli') {
                    sh """
                        # Kustomize ÏÑ§Ïπò (sudo ÏóÜÏù¥ ÏÇ¨Ïö©Ïûê ÎîîÎ†âÌÜ†Î¶¨Ïóê ÏÑ§Ïπò)
                        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
                        mkdir -p \$HOME/bin
                        mv kustomize \$HOME/bin/
                        export PATH=\$PATH:\$HOME/bin

                        # ÌôòÍ≤ΩÎ≥Ñ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
                        cd deployment/cicd/kustomize/overlays/${environment}

                        # Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
                        \$HOME/bin/kustomize edit set image acrdigitalgarage01.azurecr.io/phonebill/phonebill-front:${environment}-${imageTag}

                        # Îß§ÎãàÌéòÏä§Ìä∏ Ï†ÅÏö©
                        kubectl apply -k .

                        # Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
                        echo "Waiting for deployments to be ready..."
                        kubectl -n phonebill-${environment} wait --for=condition=available deployment/phonebill-front --timeout=300s
                    """
                }
            }
        
            // ÌååÏù¥ÌîÑÎùºÏù∏ ÏôÑÎ£å Î°úÍ∑∏ (Scripted Pipeline Î∞©Ïãù)
            stage('Pipeline Complete') {
                echo "üßπ Pipeline completed. Pod cleanup handled by Jenkins Kubernetes Plugin."
                
                // ÏÑ±Í≥µ/Ïã§Ìå® Ïó¨Î∂Ä Î°úÍπÖ
                if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
                    echo "‚úÖ Pipeline completed successfully!"
                } else {
                    echo "‚ùå Pipeline failed with result: ${currentBuild.result}"
                }
            }
            
        } catch (Exception e) {
            currentBuild.result = 'FAILURE'
            echo "‚ùå Pipeline failed with exception: ${e.getMessage()}"
            throw e
        } finally {
            echo "üßπ Cleaning up resources and preparing for pod termination..."
            echo "Pod will be terminated in 3 seconds due to terminationGracePeriodSeconds: 3"
        }
    }
}